import {
  EMPTY,
  catchError,
  debounceTime,
  defer,
  distinctUntilChanged,
  finalize,
  from,
  fromEvent,
  isObservable,
  map,
  mergeMap,
  of,
  scan,
  switchMap,
  takeUntil,
  takeWhile,
  tap,
  throwError,
  withLatestFrom
} from "./chunk-7XBSPSBM.js";
import {
  Observable,
  Subject
} from "./chunk-PPKRZ6ZH.js";
import "./chunk-CEQRFMJQ.js";

// node_modules/@rxjs-ninja/rxjs-utility/rxjs-utility.esm.js
function debounceWithQuery(time, queryMethod) {
  return function(source) {
    return source.pipe(debounceTime(time), distinctUntilChanged(), switchMap(queryMethod));
  };
}
function parseJwt(token) {
  var base64Url = token.split(".")[1];
  var base64 = base64Url.replace(/-/g, "+").replace(/_/g, "/");
  var jsonPayload = decodeURIComponent(atob(base64).split("").map(function(c) {
    return "%" + ("00" + c.charCodeAt(0).toString(16)).slice(-2);
  }).join(""));
  return JSON.parse(jsonPayload);
}
function decodeJWT() {
  return function(source) {
    return source.pipe(map(function(value) {
      return parseJwt(value);
    }));
  };
}
var __assign = function() {
  __assign = Object.assign || function __assign2(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __read2(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
}
function __spread() {
  for (var ar = [], i = 0; i < arguments.length; i++)
    ar = ar.concat(__read2(arguments[i]));
  return ar;
}
function createOrReturnObservable(input) {
  return isObservable(input) ? input : of(input);
}
function roundNumber(num, places) {
  var factor = Math.pow(10, places);
  return Math.round(num * factor) / factor;
}
var SupportedLengths = {
  /**
   * Centimeters
   */
  CENTIMETERS: "cm",
  /**
   * Feet
   */
  FEET: "feet",
  /**
   * Inches
   */
  INCHES: "inches",
  /**
   * Kilometers
   */
  KILOMETERS: "km",
  /**
   * Meters
   */
  METERS: "meters",
  /**
   * Miles
   */
  MILES: "miles",
  /**
   * Yards
   */
  YARDS: "yards"
};
var Lengths;
(function(Lengths2) {
  Lengths2["CENTIMETERS"] = "cm";
  Lengths2["FEET"] = "feet";
  Lengths2["INCHES"] = "inches";
  Lengths2["KILOMETERS"] = "km";
  Lengths2["METERS"] = "meters";
  Lengths2["MILES"] = "miles";
  Lengths2["YARDS"] = "yards";
})(Lengths || (Lengths = {}));
var _a;
var _b;
var _c;
var _d;
var _e;
var _f;
var _g;
var fromCm = (_a = {}, _a[SupportedLengths.CENTIMETERS] = function(num, precision) {
  return roundNumber(num, precision);
}, _a[SupportedLengths.FEET] = function(value, precision) {
  return roundNumber(value * 0.032808, precision);
}, _a[SupportedLengths.INCHES] = function(value, precision) {
  return roundNumber(value * 0.3937, precision);
}, _a[SupportedLengths.KILOMETERS] = function(value, precision) {
  return roundNumber(value / 1e5, precision);
}, _a[SupportedLengths.METERS] = function(value, precision) {
  return roundNumber(value / 100, precision);
}, _a[SupportedLengths.MILES] = function(value, precision) {
  return roundNumber(value * 62137e-10, precision);
}, _a.yards = function(value, precision) {
  return roundNumber(value * 0.010936, precision);
}, _a);
var fromFeet = (_b = {}, _b[SupportedLengths.CENTIMETERS] = function(value, precision) {
  return roundNumber(value / 0.032808, precision);
}, _b[SupportedLengths.FEET] = function(value, precision) {
  return roundNumber(value, precision);
}, _b[SupportedLengths.INCHES] = function(value, precision) {
  return roundNumber(value * 12, precision);
}, _b[SupportedLengths.KILOMETERS] = function(value, precision) {
  return roundNumber(value / 3280.8, precision);
}, _b[SupportedLengths.METERS] = function(value, precision) {
  return roundNumber(value / 3.2808, precision);
}, _b[SupportedLengths.MILES] = function(value, precision) {
  return roundNumber(value * 18939e-8, precision);
}, _b[SupportedLengths.YARDS] = function(value, precision) {
  return roundNumber(value * 0.33333, precision);
}, _b);
var fromInches = (_c = {}, _c[SupportedLengths.CENTIMETERS] = function(value, precision) {
  return roundNumber(value / 0.3937, precision);
}, _c[SupportedLengths.FEET] = function(value, precision) {
  return roundNumber(value * 0.083333, precision);
}, _c[SupportedLengths.INCHES] = function(value, precision) {
  return roundNumber(value, precision);
}, _c[SupportedLengths.KILOMETERS] = function(value, precision) {
  return roundNumber(value / 39370, precision);
}, _c[SupportedLengths.METERS] = function(value, precision) {
  return roundNumber(value / 39.37, precision);
}, _c[SupportedLengths.MILES] = function(value, precision) {
  return roundNumber(value * 15783e-9, precision);
}, _c[SupportedLengths.YARDS] = function(value, precision) {
  return roundNumber(value * 0.027778, precision);
}, _c);
var fromKm = (_d = {}, _d[SupportedLengths.CENTIMETERS] = function(value, precision) {
  return roundNumber(value * 1e5, precision);
}, _d[SupportedLengths.FEET] = function(value, precision) {
  return roundNumber(value * 3280.8, precision);
}, _d[SupportedLengths.INCHES] = function(value, precision) {
  return roundNumber(value * 39370, precision);
}, _d[SupportedLengths.KILOMETERS] = function(value, precision) {
  return roundNumber(value, precision);
}, _d[SupportedLengths.METERS] = function(value, precision) {
  return roundNumber(value * 1e3, precision);
}, _d[SupportedLengths.MILES] = function(value, precision) {
  return roundNumber(value * 0.62137, precision);
}, _d[SupportedLengths.YARDS] = function(value, precision) {
  return roundNumber(value * 1093.6, precision);
}, _d);
var fromMeters = (_e = {}, _e[SupportedLengths.CENTIMETERS] = function(value, precision) {
  return roundNumber(value / 0.01, precision);
}, _e[SupportedLengths.FEET] = function(value, precision) {
  return roundNumber(value * 3.2808, precision);
}, _e[SupportedLengths.INCHES] = function(value, precision) {
  return roundNumber(value * 39.37, precision);
}, _e[SupportedLengths.KILOMETERS] = function(value, precision) {
  return roundNumber(value / 1e3, precision);
}, _e[SupportedLengths.METERS] = function(value, precision) {
  return roundNumber(value, precision);
}, _e[SupportedLengths.MILES] = function(value, precision) {
  return roundNumber(value * 62137e-8, precision);
}, _e[SupportedLengths.YARDS] = function(value, precision) {
  return roundNumber(value * 1.0936, precision);
}, _e);
var fromMiles = (_f = {}, _f[SupportedLengths.CENTIMETERS] = function(value, precision) {
  return roundNumber(value / 62137e-10, precision);
}, _f[SupportedLengths.FEET] = function(value, precision) {
  return roundNumber(value * 5280, precision);
}, _f[SupportedLengths.INCHES] = function(value, precision) {
  return roundNumber(value * 63360, precision);
}, _f[SupportedLengths.KILOMETERS] = function(value, precision) {
  return roundNumber(value / 0.62137, precision);
}, _f[SupportedLengths.METERS] = function(value, precision) {
  return roundNumber(value / 62137e-8, precision);
}, _f[SupportedLengths.MILES] = function(value, precision) {
  return roundNumber(value, precision);
}, _f[SupportedLengths.YARDS] = function(value, precision) {
  return roundNumber(value * 1760, precision);
}, _f);
var fromYards = (_g = {}, _g[SupportedLengths.CENTIMETERS] = function(value, precision) {
  return roundNumber(value / 0.010936, precision);
}, _g[SupportedLengths.FEET] = function(value, precision) {
  return roundNumber(value * 3, precision);
}, _g[SupportedLengths.INCHES] = function(value, precision) {
  return roundNumber(value * 36, precision);
}, _g[SupportedLengths.KILOMETERS] = function(value, precision) {
  return roundNumber(value / 1093.6, precision);
}, _g[SupportedLengths.METERS] = function(value, precision) {
  return roundNumber(value / 1.0936, precision);
}, _g[SupportedLengths.MILES] = function(value, precision) {
  return roundNumber(value * 56818e-8, precision);
}, _g[SupportedLengths.YARDS] = function(value, precision) {
  return roundNumber(value, precision);
}, _g);
function length(fromLength, toLength, precision) {
  if (precision === void 0) {
    precision = 3;
  }
  var fromLength$ = createOrReturnObservable(fromLength);
  var toLength$ = createOrReturnObservable(toLength);
  var precision$ = createOrReturnObservable(precision);
  return function(source) {
    return source.pipe(withLatestFrom(fromLength$, toLength$, precision$), map(function(_a2) {
      var _b2 = __read2(_a2, 4), value = _b2[0], fromLengthValue = _b2[1], toLengthValue = _b2[2], precisionValue = _b2[3];
      switch (fromLengthValue) {
        case SupportedLengths.CENTIMETERS: {
          return fromCm[toLengthValue](value, precisionValue);
        }
        case SupportedLengths.FEET: {
          return fromFeet[toLengthValue](value, precisionValue);
        }
        case SupportedLengths.INCHES: {
          return fromInches[toLengthValue](value, precisionValue);
        }
        case SupportedLengths.KILOMETERS: {
          return fromKm[toLengthValue](value, precisionValue);
        }
        case SupportedLengths.METERS: {
          return fromMeters[toLengthValue](value, precisionValue);
        }
        case SupportedLengths.MILES: {
          return fromMiles[toLengthValue](value, precisionValue);
        }
        case SupportedLengths.YARDS: {
          return fromYards[toLengthValue](value, precisionValue);
        }
        default:
          return roundNumber(value, precisionValue);
      }
    }));
  };
}
function fromEventSource(source, eventName, openObserver, signal) {
  if (eventName === void 0) {
    eventName = "message";
  }
  return new Observable(function(subscriber) {
    if (signal) {
      signal.onabort = function() {
        source.close();
        !subscriber.closed && subscriber.complete();
      };
    }
    function handleMessage(event) {
      if (!eventName || eventName && eventName === event.type) {
        subscriber.next(event.data);
      }
    }
    function handleError(event) {
      subscriber.error(event);
    }
    function handleOpen(event) {
      openObserver === null || openObserver === void 0 ? void 0 : openObserver.next(event);
      openObserver === null || openObserver === void 0 ? void 0 : openObserver.complete();
      source.removeEventListener("open", handleOpen);
    }
    if (openObserver) {
      source.addEventListener("open", handleOpen);
    }
    source.addEventListener(eventName, handleMessage);
    source.addEventListener("error", handleError);
    return function() {
      source.removeEventListener(eventName, handleMessage);
      source.removeEventListener("error", handleError);
      source.removeEventListener("open", handleOpen);
      source.close();
      !subscriber.closed && subscriber.complete();
    };
  });
}
function fromReadableStream(stream, signal, queueStrategy, throwEndAsError) {
  if (throwEndAsError === void 0) {
    throwEndAsError = false;
  }
  function createStream(subscriber) {
    return new WritableStream({
      write: function write(value) {
        return subscriber.next(value);
      },
      abort: function abort(error) {
        if (throwEndAsError) {
          subscriber.error(error);
        } else if (!subscriber.closed) {
          subscriber.complete();
        }
      },
      close: function close() {
        if (!subscriber.closed) {
          subscriber.complete();
        }
      }
    }, queueStrategy);
  }
  return new Observable(function(subscriber) {
    stream.pipeTo(createStream(subscriber), {
      signal
    }).then(function() {
      return !subscriber.closed && subscriber.complete();
    })["catch"](function(error) {
      return subscriber.error(error);
    });
    return function() {
      return !stream.locked && stream.cancel();
    };
  });
}
function fromFetchWithProgress(input, init, controller) {
  var _this = this;
  if (init === void 0) {
    init = {};
  }
  if (controller === void 0) {
    controller = new AbortController();
  }
  var signal = controller.signal;
  var data$ = new Subject();
  return new Observable(function(subscriber) {
    fetch(input, __assign(__assign({}, init), {
      signal
    })).then(function(_a2) {
      var body = _a2.body, headers = _a2.headers, ok = _a2.ok, status = _a2.status, statusText = _a2.statusText;
      return __awaiter(_this, void 0, void 0, function() {
        var reader, total, _process;
        var _this2 = this;
        return __generator(this, function(_b2) {
          if (!body) {
            throw new Error("Response body is empty");
          }
          if (!ok) {
            throw new Error(status + ": " + statusText);
          }
          reader = body.getReader();
          total = Number(headers.get("content-length"));
          data$.pipe(scan(function(acc, _a3) {
            var done = _a3.done, _b3 = _a3.value, value = _b3 === void 0 ? [] : _b3;
            return done ? Uint8Array.from(__spread(acc, value)) : __spread(acc, value);
          }, []), map(function(value) {
            return value instanceof Uint8Array ? value : value.length / (total === 0 ? value.length : total);
          }), takeWhile(function(result) {
            return typeof result === "number";
          }, true), takeUntil(fromEvent(signal, "abort"))).subscribe(subscriber);
          _process = function process(result) {
            return __awaiter(_this2, void 0, void 0, function() {
              return __generator(this, function(_a3) {
                data$.next(result);
                return [
                  2,
                  !result.done ? reader.read().then(_process) : Promise.resolve(result)
                ];
              });
            });
          };
          return [
            2,
            reader.read().then(_process)
          ];
        });
      });
    })["catch"](function(error) {
      return subscriber.error(error);
    });
    return function() {
      return controller && controller.abort();
    };
  });
}
function toWritableStream(stream, signal) {
  var _a2;
  var writer = ((_a2 = stream) === null || _a2 === void 0 ? void 0 : _a2.getWriter) ? stream.getWriter() : stream;
  var closed = false;
  if (signal) {
    signal.onabort = function() {
      closed = true;
      from(writer.close()).pipe(catchError(function() {
        return EMPTY;
      })).subscribe();
    };
  }
  return function(source) {
    return source.pipe(tap(function(value) {
      if (!closed) {
        from(writer.ready).pipe(mergeMap(function() {
          return from(writer.write(value)).pipe(catchError(function() {
            return EMPTY;
          }));
        })).subscribe();
      }
    }), catchError(function(error) {
      closed = true;
      return from(writer.close()).pipe(switchMap(function() {
        return throwError(error);
      }));
    }), finalize(function() {
      closed = true;
      from(writer.close()).pipe(catchError(function() {
        return EMPTY;
      })).subscribe();
    }));
  };
}
function fromWebSerial(port, writerSource, options, signal) {
  var _this = this;
  return new Observable(function(subscriber) {
    var closeStreams$ = new Subject();
    var reader;
    var writer;
    from(port.open(options || {
      baudRate: 9600
    })).pipe(tap(function() {
      closeStreams$.asObservable().pipe(tap(function() {
        return __awaiter(_this, void 0, void 0, function() {
          return __generator(this, function(_a2) {
            switch (_a2.label) {
              case 0:
                return [
                  4,
                  writer.close()
                ];
              case 1:
                _a2.sent();
                return [
                  4,
                  reader.cancel()
                ];
              case 2:
                _a2.sent();
                return [
                  4,
                  port.close()
                ];
              case 3:
                _a2.sent();
                !subscriber.closed && subscriber.complete();
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      })).subscribe();
      if (signal) {
        signal.onabort = function() {
          closeStreams$.next();
          closeStreams$.complete();
        };
      }
      port.ondisconnect = function() {
        closeStreams$.next();
        closeStreams$.complete();
      };
      if (writerSource && port.writable) {
        writer = port.writable.getWriter();
        writerSource.pipe(takeUntil(closeStreams$), toWritableStream(writer), catchError(function(err) {
          subscriber.error(err);
          return EMPTY;
        })).subscribe();
      }
      var process = function process2(result) {
        return __awaiter(_this, void 0, void 0, function() {
          return __generator(this, function(_a2) {
            subscriber.next(result.value);
            return [
              2,
              !result.done || !port.readable ? reader.read().then(process2) : Promise.resolve(result)
            ];
          });
        });
      };
      if (port.readable) {
        reader = port.readable.getReader();
        from(reader.read()).pipe(takeUntil(closeStreams$), switchMap(function(result) {
          return process(result);
        })).subscribe();
      }
    }), catchError(function(err) {
      subscriber.error(err);
      return EMPTY;
    })).subscribe();
    return function() {
      closeStreams$.next();
      closeStreams$.complete();
    };
  });
}
function convertRGBAStrToHexComponents(input) {
  var values = input.replace(/\s/g, "").match(/^rgba?\((\d+),(\d+),(\d+),?([^,\s)]+)?/i);
  if (!values) {
    throw new Error("No valid RGBA value to parse");
  }
  var _a2 = __read2(values, 5), _ = _a2[0], red = _a2[1], green = _a2[2], blue = _a2[3], alpha = _a2[4];
  var alphaNum = Math.round(Math.round(Number(alpha ? alpha.trim() : 1) * 100) / 100 * 255);
  var hexAlpha = (alphaNum + 65536).toString(16).substr(-2);
  return [(Number(red) | 1 << 8).toString(16).slice(1), (Number(green) | 1 << 8).toString(16).slice(1), (Number(blue) | 1 << 8).toString(16).slice(1), hexAlpha];
}
var isValidHex = function isValidHex2(hex) {
  return /^#([A-Fa-f0-9]{3,4}){1,2}$/.test(hex);
};
var getChunksFromString = function getChunksFromString2(st, chunkSize) {
  return st.match(new RegExp(".{" + chunkSize + "}", "g"));
};
var convertHexUnitTo256 = function convertHexUnitTo2562(hexStr) {
  return parseInt(hexStr.repeat(2 / hexStr.length), 16);
};
var getAlphafloat = function getAlphafloat2(a, alpha) {
  if (typeof a !== "undefined") {
    return a / 255;
  }
  return alpha && alpha >= 0 && alpha <= 1 ? alpha : 1;
};
function convertHexToRGBA(hex, alpha) {
  if (!isValidHex(hex)) {
    throw new Error("Invalid HEX");
  }
  var chunkSize = Math.floor((hex.length - 1) / 3);
  var hexArr = getChunksFromString(hex.slice(1), chunkSize);
  if (!hexArr) {
    throw new Error("No chunks from hex string");
  }
  var _a2 = __read2(hexArr.map(convertHexUnitTo256), 4), r = _a2[0], g = _a2[1], b = _a2[2], a = _a2[3];
  if (typeof a === "undefined" && typeof alpha === "undefined") {
    return "rgb(" + r + ", " + g + ", " + b + ")";
  }
  var roundedFloat = Math.round((getAlphafloat(a, alpha) + Number.EPSILON) * 100) / 100;
  return "rgba(" + r + ", " + g + ", " + b + ", " + roundedFloat + ")";
}
function hexToRGBA(alpha) {
  var alpha$ = createOrReturnObservable(alpha);
  return function(source) {
    return source.pipe(withLatestFrom(alpha$), map(function(_a2) {
      var _b2 = __read2(_a2, 2), value = _b2[0], alphaValue = _b2[1];
      return convertHexToRGBA(value, alphaValue);
    }));
  };
}
function mapIf(predicate, trueResult, falseResult) {
  return function(source) {
    return source.pipe(map(function(value) {
      return predicate(value) ? trueResult(value) : falseResult(value);
    }));
  };
}
function rgbToHex(excludeHash) {
  var excludeHash$ = createOrReturnObservable(excludeHash);
  return function(source) {
    return source.pipe(map(function(input) {
      return convertRGBAStrToHexComponents(input);
    }), withLatestFrom(excludeHash$), map(function(_a2) {
      var _b2 = __read2(_a2, 2), _c2 = __read2(_b2[0], 3), red = _c2[0], green = _c2[1], blue = _c2[2], excludeHashValue = _b2[1];
      return excludeHashValue ? "" + red + green + blue : "#" + red + green + blue;
    }));
  };
}
function rgbaToHex(excludeHash) {
  var excludeHash$ = createOrReturnObservable(excludeHash);
  return function(source) {
    return source.pipe(map(function(input) {
      return convertRGBAStrToHexComponents(input);
    }), withLatestFrom(excludeHash$), map(function(_a2) {
      var _b2 = __read2(_a2, 2), hexColour = _b2[0], excludeHashValue = _b2[1];
      return excludeHashValue ? "" + hexColour.join("") : "#" + hexColour.join("");
    }));
  };
}
function switchMapIf(predicate, trueResult, falseResult) {
  return function(source) {
    return source.pipe(switchMap(function(value) {
      return predicate(value) ? trueResult(value) : falseResult(value);
    }));
  };
}
function takeUntilSignal(signal) {
  var innerSubject$ = new Subject();
  signal.onabort = function() {
    return innerSubject$.next();
  };
  return function(source) {
    return source.pipe(takeUntil(innerSubject$));
  };
}
function tapIf(predicate, callback) {
  return function(source) {
    return source.pipe(tap(function(value) {
      return predicate(value) && callback(value);
    }));
  };
}
function tapOnFirstEmit(callback) {
  return function(source) {
    return of(void 0).pipe(tap(callback), switchMap(function() {
      return source;
    }));
  };
}
function tapOnSubscribe(callback) {
  return function(source) {
    return defer(function() {
      return of(void 0).pipe(tap(callback), switchMap(function() {
        return source;
      }));
    });
  };
}
function tapOnUnsubscribe(callback) {
  return function(source) {
    return new Observable(function(subscriber) {
      var sub = source.subscribe(subscriber);
      return function() {
        callback();
        !sub.closed && sub.unsubscribe();
      };
    });
  };
}
var SupportedTemperatures = {
  /**
   * Celsius
   */
  CELSIUS: "celsius",
  /**
   * Fahrenheit
   */
  FAHRENHEIT: "fahrenheit",
  /**
   * Kelvin
   */
  KELVIN: "kelvin",
  /**
   * Rankine
   */
  RANKINE: "rankine"
};
var Temperatures;
(function(Temperatures2) {
  Temperatures2["CELSIUS"] = "celsius";
  Temperatures2["FAHRENHEIT"] = "fahrenheit";
  Temperatures2["KELVIN"] = "kelvin";
  Temperatures2["RANKINE"] = "rankine";
})(Temperatures || (Temperatures = {}));
var _a$1;
var _b$1;
var _c$1;
var _d$1;
var fromCelsius = (_a$1 = {}, _a$1[SupportedTemperatures.CELSIUS] = function(num, precision) {
  return roundNumber(num, precision);
}, _a$1[SupportedTemperatures.FAHRENHEIT] = function(num, precision) {
  return roundNumber(num * 1.8 + 32, precision);
}, _a$1[SupportedTemperatures.KELVIN] = function(num, precision) {
  return roundNumber(num + 273.15, precision);
}, _a$1[SupportedTemperatures.RANKINE] = function(num, precision) {
  return roundNumber((num + 273.15) * 1.8, precision);
}, _a$1);
var fromFahrenheit = (_b$1 = {}, _b$1[SupportedTemperatures.CELSIUS] = function(num, precision) {
  return roundNumber((num - 32) / 1.8, precision);
}, _b$1[SupportedTemperatures.FAHRENHEIT] = function(num, precision) {
  return roundNumber(num, precision);
}, _b$1[SupportedTemperatures.KELVIN] = function(num, precision) {
  return roundNumber((num - 32) / 1.8 + 273.15, precision);
}, _b$1[SupportedTemperatures.RANKINE] = function(num, precision) {
  return roundNumber(num + 459.67, precision);
}, _b$1);
var fromKelvin = (_c$1 = {}, _c$1[SupportedTemperatures.CELSIUS] = function(num, precision) {
  return roundNumber(num - 273.15, precision);
}, _c$1[SupportedTemperatures.FAHRENHEIT] = function(num, precision) {
  return roundNumber((num - 273.15) * 1.8 + 32, precision);
}, _c$1[SupportedTemperatures.KELVIN] = function(num, precision) {
  return roundNumber(num, precision);
}, _c$1[SupportedTemperatures.RANKINE] = function(num, precision) {
  return roundNumber(num * 1.8, precision);
}, _c$1);
var fromRankine = (_d$1 = {}, _d$1[SupportedTemperatures.CELSIUS] = function(num, precision) {
  return roundNumber((num - 491.67) * 1.8, precision);
}, _d$1[SupportedTemperatures.FAHRENHEIT] = function(num, precision) {
  return roundNumber(num - 491.67, precision);
}, _d$1[SupportedTemperatures.KELVIN] = function(num, precision) {
  return roundNumber(num / 1.8, precision);
}, _d$1[SupportedTemperatures.RANKINE] = function(num, precision) {
  return roundNumber(num, precision);
}, _d$1);
function temperature(fromTemperature, toTemperature, precision) {
  if (precision === void 0) {
    precision = 2;
  }
  var fromTemperature$ = createOrReturnObservable(fromTemperature);
  var toTemperature$ = createOrReturnObservable(toTemperature);
  var precision$ = createOrReturnObservable(precision);
  return function(source) {
    return source.pipe(withLatestFrom(fromTemperature$, toTemperature$, precision$), map(function(_a2) {
      var _b2 = __read2(_a2, 4), value = _b2[0], fromTemperatureValue = _b2[1], toTemperatureValue = _b2[2], precisionValue = _b2[3];
      switch (fromTemperatureValue) {
        case SupportedTemperatures.CELSIUS: {
          return fromCelsius[toTemperatureValue](value, precisionValue);
        }
        case SupportedTemperatures.FAHRENHEIT: {
          return fromFahrenheit[toTemperatureValue](value, precisionValue);
        }
        case SupportedTemperatures.KELVIN: {
          return fromKelvin[toTemperatureValue](value, precisionValue);
        }
        case SupportedTemperatures.RANKINE: {
          return fromRankine[toTemperatureValue](value, precisionValue);
        }
        default:
          return roundNumber(value, precisionValue);
      }
    }));
  };
}
var SupportedWeights = {
  /**
   * Grams
   */
  GRAMS: "g",
  /**
   * Kilograms
   */
  KILOGRAMS: "kg",
  /**
   * Pounds
   */
  POUNDS: "lb",
  /**
   * Ounces
   */
  OUNCES: "oz",
  /**
   * Stones
   */
  STONE: "st"
};
var Weights;
(function(Weights2) {
  Weights2["GRAMS"] = "g";
  Weights2["KILOGRAMS"] = "kg";
  Weights2["POUNDS"] = "lb";
  Weights2["OUNCES"] = "oz";
  Weights2["STONE"] = "st";
})(Weights || (Weights = {}));
var _a$2;
var _b$2;
var _c$2;
var _d$2;
var _e$1;
var fromKg = (_a$2 = {}, _a$2[SupportedWeights.GRAMS] = function(value, precision) {
  return roundNumber(value * 1e3, precision);
}, _a$2[SupportedWeights.KILOGRAMS] = function(value, precision) {
  return roundNumber(value, precision);
}, _a$2[SupportedWeights.POUNDS] = function(value, precision) {
  return roundNumber(value * 2.2046, precision);
}, _a$2[SupportedWeights.OUNCES] = function(value, precision) {
  return roundNumber(value * 35.274, precision);
}, _a$2[SupportedWeights.STONE] = function(value, precision) {
  return roundNumber(value * 0.1574, precision);
}, _a$2);
var fromLb = (_b$2 = {}, _b$2[SupportedWeights.GRAMS] = function(value, precision) {
  return roundNumber(value / 22046e-7, precision);
}, _b$2[SupportedWeights.KILOGRAMS] = function(value, precision) {
  return roundNumber(value / 2.2046, precision);
}, _b$2[SupportedWeights.POUNDS] = function(value, precision) {
  return roundNumber(value, precision);
}, _b$2[SupportedWeights.OUNCES] = function(value, precision) {
  return roundNumber(value * 16, precision);
}, _b$2[SupportedWeights.STONE] = function(value, precision) {
  return roundNumber(value * 0.071429, precision);
}, _b$2);
var fromG = (_c$2 = {}, _c$2[SupportedWeights.GRAMS] = function(value, precision) {
  return roundNumber(value, precision);
}, _c$2[SupportedWeights.KILOGRAMS] = function(value, precision) {
  return roundNumber(value / 1e3, precision);
}, _c$2[SupportedWeights.POUNDS] = function(value, precision) {
  return roundNumber(value * 22046e-7, precision);
}, _c$2[SupportedWeights.OUNCES] = function(value, precision) {
  return roundNumber(value * 0.035274, precision);
}, _c$2[SupportedWeights.STONE] = function(value, precision) {
  return roundNumber(value * 15747e-8, precision);
}, _c$2);
var fromOz = (_d$2 = {}, _d$2[SupportedWeights.GRAMS] = function(value, precision) {
  return roundNumber(value / 0.035274, precision);
}, _d$2[SupportedWeights.KILOGRAMS] = function(value, precision) {
  return roundNumber(value / 35.274, precision);
}, _d$2[SupportedWeights.POUNDS] = function(value, precision) {
  return roundNumber(value * 0.0625, precision);
}, _d$2[SupportedWeights.OUNCES] = function(value, precision) {
  return roundNumber(value, precision);
}, _d$2[SupportedWeights.STONE] = function(value, precision) {
  return roundNumber(value * 44643e-7, precision);
}, _d$2);
var fromSt = (_e$1 = {}, _e$1[SupportedWeights.GRAMS] = function(value, precision) {
  return roundNumber(value / 15747e-8, precision);
}, _e$1[SupportedWeights.KILOGRAMS] = function(value, precision) {
  return roundNumber(value / 0.15747, precision);
}, _e$1[SupportedWeights.POUNDS] = function(value, precision) {
  return roundNumber(value * 14, precision);
}, _e$1[SupportedWeights.OUNCES] = function(value, precision) {
  return roundNumber(value * 224, precision);
}, _e$1[SupportedWeights.STONE] = function(value, precision) {
  return roundNumber(value, precision);
}, _e$1);
function weight(fromWeight, toWeight, precision) {
  if (precision === void 0) {
    precision = 2;
  }
  var fromWeight$ = createOrReturnObservable(fromWeight);
  var toWeight$ = createOrReturnObservable(toWeight);
  var precision$ = createOrReturnObservable(precision);
  return function(source) {
    return source.pipe(withLatestFrom(fromWeight$, toWeight$, precision$), map(function(_a2) {
      var _b2 = __read2(_a2, 4), value = _b2[0], fromWeightValue = _b2[1], toWeightValue = _b2[2], precisionValue = _b2[3];
      switch (fromWeightValue) {
        case SupportedWeights.GRAMS: {
          return fromG[toWeightValue](value, precisionValue);
        }
        case SupportedWeights.KILOGRAMS: {
          return fromKg[toWeightValue](value, precisionValue);
        }
        case SupportedWeights.POUNDS: {
          return fromLb[toWeightValue](value, precisionValue);
        }
        case SupportedWeights.OUNCES: {
          return fromOz[toWeightValue](value, precisionValue);
        }
        case SupportedWeights.STONE: {
          return fromSt[toWeightValue](value, precisionValue);
        }
        default:
          return roundNumber(value, precisionValue);
      }
    }));
  };
}
export {
  Lengths,
  Temperatures,
  Weights,
  debounceWithQuery,
  decodeJWT,
  fromEventSource,
  fromFetchWithProgress,
  fromReadableStream,
  fromWebSerial,
  hexToRGBA,
  length,
  mapIf,
  rgbToHex,
  rgbaToHex,
  switchMapIf,
  takeUntilSignal,
  tapIf,
  tapOnFirstEmit,
  tapOnSubscribe,
  tapOnUnsubscribe,
  temperature,
  toWritableStream,
  weight
};
/*! Bundled license information:

@rxjs-ninja/rxjs-utility/rxjs-utility.esm.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)
*/
//# sourceMappingURL=@rxjs-ninja_rxjs-utility.js.map
